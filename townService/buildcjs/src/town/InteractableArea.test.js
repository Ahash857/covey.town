"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_mock_extended_1 = require("jest-mock-extended");
const nanoid_1 = require("nanoid");
const Player_1 = __importDefault(require("../lib/Player"));
const TestUtils_1 = require("../TestUtils");
const ConversationArea_1 = __importDefault(require("./ConversationArea"));
const InteractableArea_1 = __importStar(require("./InteractableArea"));
class TestInteractableArea extends InteractableArea_1.default {
    handleCommand() {
        throw new Error('Method not implemented.');
    }
    toModel() {
        return { id: this.id, occupants: [], type: 'ConversationArea' };
    }
}
const HALF_W = InteractableArea_1.PLAYER_SPRITE_WIDTH / 2;
const HALF_H = InteractableArea_1.PLAYER_SPRITE_HEIGHT / 2;
describe('InteractableArea', () => {
    const testAreaBox = { x: 100, y: 100, width: 100, height: 100 };
    let testArea;
    const id = (0, nanoid_1.nanoid)();
    let newPlayer;
    const townEmitter = (0, jest_mock_extended_1.mock)();
    beforeEach(() => {
        (0, jest_mock_extended_1.mockClear)(townEmitter);
        testArea = new TestInteractableArea(id, testAreaBox, townEmitter);
        newPlayer = new Player_1.default((0, nanoid_1.nanoid)(), (0, jest_mock_extended_1.mock)());
        testArea.add(newPlayer);
    });
    describe('add', () => {
        it('Adds the player to the occupants list', () => {
            expect(testArea.occupantsByID).toEqual([newPlayer.id]);
        });
        it("Sets the player's conversationLabel and emits an update for their location", () => {
            expect(newPlayer.location.interactableID).toEqual(id);
            const lastEmittedMovement = (0, TestUtils_1.getLastEmittedEvent)(townEmitter, 'playerMoved');
            expect(lastEmittedMovement.location.interactableID).toEqual(id);
        });
    });
    describe('remove', () => {
        it('Removes the player from the list of occupants', () => {
            testArea.remove(newPlayer);
            expect(testArea.occupantsByID).toEqual([]);
        });
        it("Clears the player's conversationLabel and emits an update for their location", () => {
            (0, jest_mock_extended_1.mockClear)(townEmitter);
            testArea.remove(newPlayer);
            expect(newPlayer.location.interactableID).toBeUndefined();
            const lastEmittedMovement = (0, TestUtils_1.getLastEmittedEvent)(townEmitter, 'playerMoved');
            expect(lastEmittedMovement.location.interactableID).toBeUndefined();
        });
    });
    describe('isActive', () => {
        it('Returns true when there are players in the area', () => {
            expect(testArea.isActive).toBe(true);
        });
        it('Returns false when there are no players in the area', () => {
            testArea.remove(newPlayer);
            expect(testArea.isActive).toBe(false);
        });
    });
    describe('addPlayersWithinBounds', () => {
        let playersInArea;
        let playersNotInArea;
        beforeEach(() => {
            playersInArea = [];
            playersNotInArea = [];
            const box = testArea.boundingBox;
            for (let i = 0; i < 10; i++) {
                const player = new Player_1.default((0, nanoid_1.nanoid)(), (0, jest_mock_extended_1.mock)());
                player.location.x = box.x + box.width / 2;
                player.location.y = box.y + box.height / 2;
                playersInArea.push(player);
            }
            for (let i = 0; i < 10; i++) {
                const player = new Player_1.default((0, nanoid_1.nanoid)(), (0, jest_mock_extended_1.mock)());
                player.location.x = -100;
                player.location.y = -100;
                playersNotInArea.push(player);
            }
            const mixedPlayers = playersInArea
                .concat(playersNotInArea)
                .sort((a, b) => a.id.localeCompare(b.id));
            testArea.addPlayersWithinBounds(mixedPlayers);
        });
        it('Does not include players not within the area', () => {
            playersNotInArea.forEach(player => expect(testArea.occupantsByID.includes(player.id)).toBe(false));
        });
        it('Includes all players that are within the area', () => {
            playersInArea.forEach(player => expect(testArea.occupantsByID.includes(player.id)).toBe(true));
            expect(playersInArea.length).toEqual(playersInArea.length);
        });
    });
    describe('contains', () => {
        const { x, y, width, height } = testAreaBox;
        it.each([
            { x: x + width / 2, y: y + width / 2 },
            { x: x + 10 + width / 2, y: y + 10 + width / 2 },
            { x: x - 1 + width, y: y + 1 },
            { x: x + 1, y: y + 1 },
            { x: x - 1 + width, y: y - 1 + height },
            { x: x + 1, y: y - 1 + height },
        ])('Returns true for locations that are inside of the area %p', (location) => {
            expect(testArea.contains({ ...(0, TestUtils_1.defaultLocation)(), x: location.x, y: location.y })).toBe(true);
        });
        it.each([
            { x: x - 1 + HALF_W + width, y: y + 1 - HALF_H },
            { x: x + 1 - HALF_W, y: y + 1 - HALF_H },
            { x: x - 1 + HALF_W + width, y: y - 1 + HALF_H + height },
            { x: x + 1 - HALF_W, y: y - 1 + HALF_H + height },
        ])('Returns true for locations that are outside of the area, but are included due to the player sprite size overlapping with the target area', (location) => {
            expect(testArea.contains({ ...(0, TestUtils_1.defaultLocation)(), x: location.x, y: location.y })).toBe(true);
        });
        it.each([
            { x: x + HALF_W + width, y: y - HALF_H },
            { x: x - HALF_W, y: y - HALF_H },
            { x: x + HALF_W + width, y: y + HALF_H + height },
            { x: x - HALF_W, y: y + HALF_H + height },
        ])('Returns false for locations that exactly hit the edge of the area', (location) => {
            expect(testArea.contains({ ...(0, TestUtils_1.defaultLocation)(), x: location.x, y: location.y })).toBe(false);
        });
        it.each([
            { x: x + width * 2, y: y - height },
            { x: x - width, y: y - width },
            { x: x + width * 2, y: y + height * 2 },
            { x: x - width, y: y + height * 2 },
            { x: x + 1, y: y - height },
            { x: x - width, y: y + 1 },
            { x: x + width * 2, y: y + 1 },
            { x: x + 1, y: y + height * 2 },
        ])('Returns false for locations that are outside of the area', (location) => {
            expect(testArea.contains({ ...(0, TestUtils_1.defaultLocation)(), x: location.x, y: location.y })).toBe(false);
        });
    });
    describe('overlaps', () => {
        const cheight = testAreaBox.height / 2;
        const cwidth = testAreaBox.width / 2;
        const cx = testAreaBox.x + cwidth;
        const cy = testAreaBox.y + cheight;
        const { x, y, height, width } = testAreaBox;
        it.each([
            { x: cx, y: cy, width: 2, height: 2 },
            { x: cx + 4, y: cy + 4, width: 2, height: 2 },
            { x: cx + 4, y: cy + 4, width: 2, height: 2 },
        ])('Returns true for locations that are contained entirely %p', (intersectBox) => {
            expect(testArea.overlaps(new ConversationArea_1.default({ id: 'testArea', occupants: [] }, intersectBox, (0, jest_mock_extended_1.mock)()))).toBe(true);
        });
        it.each([
            { x: x - 50, y: y - 50, width: 100, height: 100 },
            { x: x - 50, y: y + height - 50, width: 100, height: 100 },
            { x: x + width - 50, y: y - 50, width: 100, height: 100 },
            { x: x + width - 50, y: y + height - 50, width: 100, height: 100 },
            {
                x: x - InteractableArea_1.PLAYER_SPRITE_WIDTH / 2,
                y: y - InteractableArea_1.PLAYER_SPRITE_HEIGHT / 2,
                width: InteractableArea_1.PLAYER_SPRITE_WIDTH + 1,
                height: InteractableArea_1.PLAYER_SPRITE_HEIGHT + 1,
            },
            {
                x: x - InteractableArea_1.PLAYER_SPRITE_WIDTH / 2,
                y: y + height + InteractableArea_1.PLAYER_SPRITE_HEIGHT / 2,
                width: InteractableArea_1.PLAYER_SPRITE_WIDTH + 1,
                height: InteractableArea_1.PLAYER_SPRITE_HEIGHT + 1,
            },
            {
                x: x + width + InteractableArea_1.PLAYER_SPRITE_WIDTH / 2,
                y: y - InteractableArea_1.PLAYER_SPRITE_HEIGHT / 2,
                width: InteractableArea_1.PLAYER_SPRITE_WIDTH + 1,
                height: InteractableArea_1.PLAYER_SPRITE_HEIGHT + 1,
            },
            {
                x: x + width + InteractableArea_1.PLAYER_SPRITE_WIDTH / 2,
                y: y + height + InteractableArea_1.PLAYER_SPRITE_HEIGHT / 2,
                width: InteractableArea_1.PLAYER_SPRITE_WIDTH + 1,
                height: InteractableArea_1.PLAYER_SPRITE_HEIGHT + 1,
            },
        ])('Returns true for locations that are overlapping with edges %p', (intersectBox) => {
            expect(testArea.overlaps(new ConversationArea_1.default({ id: 'testArea', occupants: [] }, intersectBox, (0, jest_mock_extended_1.mock)()))).toBe(true);
        });
        it.each([
            { x: x - 50, y: y - 50, width: 10, height: 10 },
            { x: x - 50, y: y + height + 50, width: 10, height: 10 },
            { x: x + width + 50, y: y - 50, width: 100, height: 100 },
            { x: x + width + 50, y: y + height + 50, width: 100, height: 100 },
            {
                x: x - InteractableArea_1.PLAYER_SPRITE_WIDTH * 1.5,
                y: y - InteractableArea_1.PLAYER_SPRITE_HEIGHT * 1.5,
                width: InteractableArea_1.PLAYER_SPRITE_WIDTH / 2,
                height: InteractableArea_1.PLAYER_SPRITE_HEIGHT / 2,
            },
            {
                x: x - InteractableArea_1.PLAYER_SPRITE_WIDTH,
                y: y + height + InteractableArea_1.PLAYER_SPRITE_HEIGHT,
                width: InteractableArea_1.PLAYER_SPRITE_WIDTH,
                height: InteractableArea_1.PLAYER_SPRITE_HEIGHT,
            },
            {
                x: x + width + InteractableArea_1.PLAYER_SPRITE_WIDTH,
                y: y - InteractableArea_1.PLAYER_SPRITE_HEIGHT,
                width: InteractableArea_1.PLAYER_SPRITE_WIDTH,
                height: InteractableArea_1.PLAYER_SPRITE_HEIGHT,
            },
            {
                x: x + width + InteractableArea_1.PLAYER_SPRITE_WIDTH,
                y: y + height + InteractableArea_1.PLAYER_SPRITE_HEIGHT,
                width: InteractableArea_1.PLAYER_SPRITE_WIDTH,
                height: InteractableArea_1.PLAYER_SPRITE_HEIGHT,
            },
        ])('Returns false for locations that have no overlap %p', (intersectBox) => {
            expect(testArea.overlaps(new ConversationArea_1.default({ id: 'testArea', occupants: [] }, intersectBox, (0, jest_mock_extended_1.mock)()))).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,